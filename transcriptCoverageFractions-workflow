library(dplyr)
library(plotly)
library(GenomicFeatures)
library(MASS)
library(ggplot2)
library(viridis)

# Make database of known transcript lengths from gtf file
gencode <- makeTxDbFromGFF(file="gencode.v31.comprehensive.annotation.gtf", format="gtf", dataSource="gencode", organism="Homo sapiens")
gencodeLengths <- transcriptLengths(gencode, with.cds_len=TRUE, with.utr5_len=TRUE, with.utr3_len=TRUE)
lengths <- data.frame(gencodeLengths$tx_name, gencodeLengths$tx_len)

# Import 5Y data from previous extractDataFromBam script 
all_5y <- read.csv(file = "all_5y.csv", header = TRUE, na.strings="#N/A")

# Merge files by transcript name for each length
merged <- merge(all_5y, lengths, by.x = "transcriptName", by.y = "gencodeLengths.tx_name", all.x = TRUE)

# coverage = width / known length
merged <- merged %>% 
  mutate(coverages=width/gencodeLengths.tx_len)

# proportion aligned = aligned length / read length
merged <- merged %>% 
  mutate(proportionAligned=alignedLength/readLength)

# merge again with counts per transcript
express <- read_csv(file = "nanocount-5y.csv")
expression <- merge(merged, express, by.x = "transcript", by.y = "tr", all.x = TRUE)

expression$total <- cut(expression$total, breaks=c(0,1,10,100,100000), right=FALSE, dig.lab = 5)
expression$total <- as.factor(expression$total)

expression$gencodeLengths.tx_len <- cut(expression$gencodeLengths.tx_len, breaks=c(0,500,1000,1500,2000,2500,3000,5000,230000), right=FALSE, dig.lab = 5)
expression$gencodeLengths.tx_len <- as.factor(expression$gencodeLengths.tx_len)

# boxplots with expression
p <- ggplot(data=expression, aes(x=gencodeLengths.tx_len, y=coverages, color=total)) +
  geom_boxplot(outlier.shape=NA) +
  ylab("Coverage Fraction") +
  xlab("Transcript Length") +
  theme_classic(base_size=16)
p

# 2D Density
pdf("5y-density-plot.pdf", width=8, height=5)
ggplot() + 
  stat_density_2d(data=merged, aes(x=gencodeLengths.tx_len, y=coverages, fill = ..level..), geom = "polygon",
                  position = "identity",
                  na.rm = TRUE,
                  show.legend = TRUE,
                  inherit.aes = TRUE,
                  bins = 25
  ) +
  stat_smooth(data=merged, aes(x=gencodeLengths.tx_len, y=coverages), color="lavender", se=TRUE, size=1, level=0.95) +
  #geom_point(data=mediansequins, aes(x=LENGTH, y=coverages), color="orange", size=1, alpha=0.7) +
  xlim(0,8000) +
  ylim(0,1) +
  scale_fill_viridis_c() +
  theme_classic(base_size=16)
dev.off()
